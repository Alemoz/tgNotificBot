import os
import asyncio
from datetime import datetime, timedelta
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

import aiosqlite
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from dotenv import load_dotenv
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
import logging

from collections import defaultdict
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID", "-1002582897974"))

admin_ids_str = os.getenv("ADMIN_USER_IDS", "")
ADMIN_USER_IDS = set(int(admin_id.strip()) for admin_id in admin_ids_str.split(",") if admin_id.strip())

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
logging.basicConfig(level=logging.WARNING)

DB_PATH = "events.db"
WEEKDAYS = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]

# --- –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π ---
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS events (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                event_datetime TEXT NOT NULL,
                description TEXT NOT NULL,
                sent INTEGER DEFAULT 0,
                repeat_weekly INTEGER DEFAULT 0,
                repeat_daily INTEGER DEFAULT 0,
                repeat_on_weekdays TEXT DEFAULT NULL, -- –ù–æ–≤–æ–µ –ø–æ–ª–µ
                user_id INTEGER
            )
        """)
        await db.commit()

async def migrate_add_user_id_column():
    async with aiosqlite.connect(DB_PATH) as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ user_id
        cursor = await db.execute("PRAGMA table_info(events)")
        columns = await cursor.fetchall()
        column_names = [col[1] for col in columns]
        if "user_id" not in column_names:
            await db.execute("ALTER TABLE events ADD COLUMN user_id INTEGER")
            await db.commit()
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ user_id –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É events.")
        else:
            print("‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ user_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

def admin_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –î–æ–±–∞–≤–∏—Ç—å –∏–≤–µ–Ω—Ç", callback_data="add_event")],
        [InlineKeyboardButton(text="üîÅ –î–æ–±–∞–≤–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π", callback_data="add_event_weekly")],
        [InlineKeyboardButton(text="üìÜ –î–æ–±–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π", callback_data="add_event_daily")],
        [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–≤–µ–Ω—Ç", callback_data="edit_event")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∏–≤–µ–Ω—Ç–æ–≤", callback_data="list_events")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∏–≤–µ–Ω—Ç", callback_data="delete_event")],
    ])

def start_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõ† –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="open_admin")]
    ])

def close_event_list_kb():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_event_list")]
    ])
    return kb

async def add_event_to_db(event_datetime, description, user_id, repeat_weekly=False, repeat_weekdays=None):
    repeat_weekdays_str = ",".join(repeat_weekdays) if repeat_weekdays else None
    query = """
    INSERT INTO events (event_datetime, description, repeat_weekly, repeat_weekdays, user_id)
    VALUES (?, ?, ?, ?, ?)
    """
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(query, (
            event_datetime.isoformat(),
            description,
            1 if repeat_weekly else 0,
            repeat_weekdays_str,
            user_id
        ))
    await db.commit()

async def get_pending_events():
    now = datetime.now()
    current_day = now.strftime("%a")  # 'Mon', 'Tue', etc.

    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("""
               SELECT id, event_datetime, description, repeat_weekly, repeat_daily, repeat_on_weekdays, user_id
               FROM events
               WHERE (
                   sent = 0 AND datetime(event_datetime) <= datetime(?)
               ) OR (
                   repeat_on_weekdays IS NOT NULL AND instr(repeat_on_weekdays, ?) > 0
               )
           """, (now.isoformat(), current_day))
        return await cursor.fetchall()

async def mark_event_sent(event_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE events SET sent=1 WHERE id=?", (event_id,))
        await db.commit()

async def update_event_datetime(event_id: int, new_datetime: datetime):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE events SET event_datetime=?, sent=0 WHERE id=?", (new_datetime.isoformat(), event_id))
        await db.commit()

async def list_all_events():
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT id, event_datetime, description, sent, repeat_weekly FROM events ORDER BY event_datetime")
        return await cursor.fetchall()

async def delete_event(event_id: int) -> bool:
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("DELETE FROM events WHERE id=?", (event_id,))
        await db.commit()
        return cursor.rowcount > 0

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_USER_IDS

def create_weekdays_keyboard(selected_days: set):
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ —Ä—è–¥–∞–º, –Ω–∞–ø—Ä–∏–º–µ—Ä –ø–æ 4 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    keyboard = []
    row = []
    for i, day in enumerate(WEEKDAYS, start=1):
        prefix = "‚úÖ" if day in selected_days else "‚¨úÔ∏è"
        button = InlineKeyboardButton(text=f"{prefix} {day}", callback_data=f"weekday_{day}")
        row.append(button)
        if i % 4 == 0:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ä—è–¥–æ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
    keyboard.append([InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ ‚úÖ", callback_data="weekday_done")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# --- FSM States ---
class AddEventStates(StatesGroup):
    waiting_for_datetime = State()
    waiting_for_description = State()

class AddEventDailyStates(StatesGroup):
    waiting_for_datetime_d = State()
    waiting_for_description_d = State()

class AddEventWeeklyStates(StatesGroup):
    waiting_for_datetime_w = State()
    waiting_for_description_w = State()
    waiting_for_weekdays_selection = State()

class AddEventWeekdaysStates(StatesGroup):
    waiting_for_datetime_wd = State()
    waiting_for_description_wd = State()
    waiting_for_weekdays_selection = State()

class EditEventStates(StatesGroup):
    waiting_for_edit_id = State()
    waiting_for_new_dt = State()
    waiting_for_new_desc = State()

# --- –•–µ–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥ ---
@dp.message(Command(commands=["start"]))
async def cmd_start(message: types.Message):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã–º–∏ –∏–≤–µ–Ω—Ç–∞–º–∏.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/addevent ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∏–≤–µ–Ω—Ç\n"
        "/addeventw ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –∏–≤–µ–Ω—Ç\n"
        "/events ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≤–µ–Ω—Ç–æ–≤\n"
        "/delevent ‚Äî —É–¥–∞–ª–∏—Ç—å –∏–≤–µ–Ω—Ç\n"
    )
    if is_admin(message.from_user.id):
        await message.answer(text, reply_markup=start_menu())
    else:
        await message.answer(text)

@dp.message(Command(commands=["addevent"]))
async def cmd_add_event(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    args = message.text.split(maxsplit=3)
    if len(args) < 4:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/addevent –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú –û–ø–∏—Å–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞")
        return
    date_str, time_str, description = args[1], args[2], args[3]
    try:
        event_dt = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú")
        return
    await add_event_to_db(event_dt, description, message.from_user.id, repeat_weekly=False)
    await message.reply(f"‚úÖ –ò–≤–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ {event_dt.strftime('%Y-%m-%d %H:%M')}:\n{description}")

@dp.message(Command(commands=["addeventd"]))
async def cmd_add_event_daily(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    args = message.text.split(maxsplit=3)
    if len(args) < 4:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/addeventd –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú –û–ø–∏—Å–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞ (–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π)")
        return
    date_str, time_str, description = args[1], args[2], args[3]
    try:
        event_dt = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú")
        return
    await add_event_to_db(event_dt, description, message.from_user.id, repeat_daily=True)
    await message.reply(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∏–≤–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ {event_dt.strftime('%Y-%m-%d %H:%–ú')}:\n{description}")

@dp.message(Command(commands=["addeventwd"]))
async def cmd_add_event_weekdays(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    args = message.text.split(maxsplit=4)
    if len(args) < 5:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/addeventwd –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú –î–Ω–∏_–Ω–µ–¥–µ–ª–∏ –û–ø–∏—Å–∞–Ω–∏–µ\n"
                            "–ü—Ä–∏–º–µ—Ä: /addeventwd 2024-06-15 14:00 Mon,Wed,Sun –ò–≤–µ–Ω—Ç –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ")
        return
    date_str, time_str, weekdays_str, description = args[1], args[2], args[3], args[4]
    try:
        event_dt = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú")
        return

    # –û—á–∏—Å—Ç–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    weekdays_list = [d.strip().capitalize()[:3] for d in weekdays_str.split(",")]
    valid_days = {"Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"}
    if not all(day in valid_days for day in weekdays_list):
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è: Mon,Tue,Wed,...")
        return
    repeat_days = ",".join(weekdays_list)

    await add_event_to_db(event_dt, description, message.from_user.id, repeat_on_weekdays=repeat_days)
    await message.reply(f"‚úÖ –ò–≤–µ–Ω—Ç –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ ({repeat_days}) –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ {event_dt.strftime('%Y-%m-%d %H:%M')}:\n{description}")

@dp.message(Command(commands=["addeventw"]))
async def cmd_add_event_weekly(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    args = message.text.split(maxsplit=3)
    if len(args) < 4:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/addeventw –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú –û–ø–∏—Å–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞ (–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π)")
        return
    date_str, time_str, description = args[1], args[2], args[3]
    try:
        event_dt = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú")
        return
    await add_event_to_db(event_dt, description, message.from_user.id, repeat_weekly=True)
    await message.reply(f"‚úÖ –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∏–≤–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ {event_dt.strftime('%Y-%m-%d %H:%M')}:\n{description}")

@dp.message(Command(commands=["events"]))
async def cmd_list_events(message: types.Message, user_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(
            "SELECT id, event_datetime, description, repeat_daily FROM events ORDER BY event_datetime"
        )
        events = await cursor.fetchall()
    if not events:
        await message.answer("üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∏–≤–µ–Ω—Ç–æ–≤.")
        return

    text = "üìÖ <b>–°–ø–∏—Å–æ–∫ –∏–≤–µ–Ω—Ç–æ–≤:</b>\n\n"
    for ev in events:
        dt = datetime.fromisoformat(ev[1])
        daily_mark = " üîÅ (–ï–∂–µ–¥–Ω–µ–≤–Ω–æ)" if ev[3] else ""
        text += f"<b>ID:</b> {ev[0]} | <b>‚è∞</b> {dt.strftime('%Y-%m-%d %H:%M')}{daily_mark}\nüìå {ev[2]}\n\n"
    msg = await message.answer(text, reply_markup=close_event_list_kb(), parse_mode="HTML")
    fsm_messages[message.from_user.id].append(msg)

@dp.callback_query(F.data == "close_event_list")
async def close_event_list(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except Exception:
        pass
    await callback.answer("–ó–∞–∫—Ä—ã—Ç–æ ‚úÖ", show_alert=False)

@dp.message(Command(commands=["delevent"]))
async def cmd_delete_event(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    args = message.text.split(maxsplit=1)
    if len(args) < 2 or not args[1].isdigit():
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/delevent ID (–≥–¥–µ ID ‚Äî —á–∏—Å–ª–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–≤–µ–Ω—Ç–æ–≤)")
        return
    event_id = int(args[1])
    deleted = await delete_event(event_id)
    if deleted:
        await message.reply(f"‚úÖ –ò–≤–µ–Ω—Ç —Å ID {event_id} —É–¥–∞–ª—ë–Ω.")
    else:
        await message.reply(f"‚ùå –ò–≤–µ–Ω—Ç —Å ID {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@dp.message(Command(commands=["getid"]))
async def cmd_getid(message: types.Message):
    await message.answer(f"üÜî –¢–≤–æ–π ID: <code>{message.from_user.id}</code>")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–±–µ–∫–æ–≤ ---
@dp.callback_query()
async def handle_admin_callbacks(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if not is_admin(user_id):
        await callback.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", show_alert=True)
        return
    await cleanup_fsm_messages(user_id)
    data = callback.data
    if data == "open_admin":
        await callback.message.edit_text("üõ† –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_menu())
        await callback.answer()

    elif data == "add_event":
        msg = await callback.message.answer("üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏–≤–µ–Ω—Ç–∞ (–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú):")
        fsm_messages[callback.from_user.id].append(msg)
        await state.set_state(AddEventStates.waiting_for_datetime)
        await callback.answer()
    elif data == "add_event_daily":
        msg = await callback.message.answer("üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∏–≤–µ–Ω—Ç–∞ (–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú):")
        fsm_messages[callback.from_user.id].append(msg)
        await state.set_state(AddEventDailyStates.waiting_for_datetime_d)
        await callback.answer()
    elif data == "add_event_weekly":
        msg = await bot.send_message(callback.from_user.id, "üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∏–≤–µ–Ω—Ç–∞ (–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú):")
        fsm_messages[callback.from_user.id].append(msg)
        await state.set_state(AddEventWeeklyStates.waiting_for_datetime_w)
        await callback.answer()
    elif data == "add_event_weekdays":
        msg = await callback.message.answer(
            "üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏–≤–µ–Ω—Ç–∞, –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ (–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú):")
        fsm_messages[callback.from_user.id].append(msg)
        await state.set_state(AddEventWeekdaysStates.waiting_for_datetime_wd)
        await callback.answer()

    elif data == "edit_event":
        msg = await callback.message.answer("üÜî –í–≤–µ–¥–∏ ID –∏–≤–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å:")
        fsm_messages[callback.from_user.id].append(msg)
        await state.set_state(EditEventStates.waiting_for_edit_id)
        await callback.answer()

    elif data == "list_events":
        await cmd_list_events(callback.message, user_id=callback.from_user.id)
        await callback.answer()

    elif data == "delete_event":
        msg = await callback.message.answer("üóë –í–≤–µ–¥–∏ /delevent ID, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∏–≤–µ–Ω—Ç")
        fsm_messages[callback.from_user.id].append(msg)
        await callback.answer()
    elif data and data.startswith(
            "weekday_") and await state.get_state() == AddEventWeeklyStates.waiting_for_weekdays_selection.state:
        stored_data = await state.get_data()
        selected = set(stored_data.get("selected_weekdays", []))

        action = data[len("weekday_"):]

        if action == "done":
            if not selected:
                await callback.answer("‚ùó –ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–µ–Ω—å!", show_alert=True)
                return

            event_dt = stored_data.get("event_datetime")
            description = stored_data.get("description")
            selected_days = list(selected)

            await add_event_to_db(event_dt, description, user_id, repeat_weekly=True, repeat_weekdays=selected_days)

            await callback.message.answer(
                f"‚úÖ –ò–≤–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º –ø–æ –¥–Ω—è–º: {', '.join(selected_days)}\n"
                f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: {event_dt.strftime('%Y-%m-%d %H:%M')}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}"
            )
            await state.clear()
            await callback.answer()
        else:
            # Toggle –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
            if action in selected:
                selected.remove(action)
            else:
                selected.add(action)
            await state.update_data(selected_weekdays=list(selected))

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
            keyboard = create_weekdays_keyboard(selected)  # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            await callback.message.edit_reply_markup(reply_markup=keyboard)
            await callback.answer()
# --- FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –∏–≤–µ–Ω—Ç–∞ ---

fsm_messages = defaultdict(list)

async def cleanup_fsm_messages(user_id: int):
    for msg in fsm_messages[user_id]:
        try:
            await msg.delete()
        except Exception:
            pass
    fsm_messages[user_id].clear()

@dp.message(AddEventStates.waiting_for_datetime)
async def fsm_add_datetime(message: types.Message, state: FSMContext):
    try:
        dt = datetime.strptime(message.text.strip(), "%Y-%m-%d %H:%M")
        await state.update_data(event_datetime=dt)
        try:
            await message.delete()
        except Exception:
            pass
        await cleanup_fsm_messages(message.from_user.id)  # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        msg = await message.answer("üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        fsm_messages[message.from_user.id].append(msg)
        await state.set_state(AddEventStates.waiting_for_description)
    except ValueError:
        try:
            await message.delete()
        except Exception:
            pass
        await cleanup_fsm_messages(message.from_user.id)
        msg = await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        fsm_messages[message.from_user.id].append(msg)

@dp.message(AddEventStates.waiting_for_description)
async def fsm_add_description(message: types.Message, state: FSMContext):
    data = await state.get_data()
    dt = data["event_datetime"]
    desc = message.text.strip()
    try:
        await message.delete()
    except Exception:
        pass
    await add_event_to_db(dt, desc, message.from_user.id, repeat_weekly=False)
    await cleanup_fsm_messages(message.from_user.id)
    msg = await message.answer(f"‚úÖ –ò–≤–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ {dt.strftime('%Y-%m-%d %H:%M')}:\n{desc}")
    fsm_messages[message.from_user.id].append(msg)
    await state.clear()

@dp.message(AddEventDailyStates.waiting_for_datetime_d)
async def fsm_add_daily_datetime(message: types.Message, state: FSMContext):
    try:
        dt = datetime.strptime(message.text.strip(), "%Y-%m-%d %H:%M")
        await state.update_data(event_datetime=dt)
        try:
            await message.delete()
        except Exception:
            pass
        await cleanup_fsm_messages(message.from_user.id)
        msg = await message.answer("üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∏–≤–µ–Ω—Ç–∞:")
        fsm_messages[message.from_user.id].append(msg)
        await state.set_state(AddEventDailyStates.waiting_for_description_d)
    except ValueError:
        try:
            await message.delete()
        except Exception:
            pass
        await cleanup_fsm_messages(message.from_user.id)
        msg = await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ (–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú).")
        fsm_messages[message.from_user.id].append(msg)

@dp.message(AddEventDailyStates.waiting_for_description_d)
async def fsm_add_daily_description(message: types.Message, state: FSMContext):
    data = await state.get_data()
    dt = data["event_datetime"]
    desc = message.text.strip()
    try:
        await message.delete()
    except Exception:
        pass
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–≤–µ–Ω—Ç —Å repeat_daily=1
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT INTO events (event_datetime, description, repeat_daily, user_id) VALUES (?, ?, 1, ?)",
            (dt.isoformat(), desc, message.from_user.id)
        )
        await db.commit()
    await cleanup_fsm_messages(message.from_user.id)
    msg = await message.answer(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∏–≤–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ {dt.strftime('%Y-%m-%d %H:%M')}:\n{desc}")
    fsm_messages[message.from_user.id].append(msg)
    await state.clear()

@dp.message(AddEventWeeklyStates.waiting_for_datetime_w)
async def fsm_weekly_datetime(message: types.Message, state: FSMContext):
    try:
        dt = datetime.strptime(message.text.strip(), "%Y-%m-%d %H:%M")
        await state.update_data(event_datetime=dt)
        try:
            await message.delete()
        except Exception:
            pass
        await cleanup_fsm_messages(message.from_user.id)
        msg = await message.answer("üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        fsm_messages[message.from_user.id].append(msg)
        await state.set_state(AddEventWeeklyStates.waiting_for_description_w)
    except ValueError:
        try:
            await message.delete()
        except Exception:
            pass
        await cleanup_fsm_messages(message.from_user.id)
        msg = await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ (–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú)")
        fsm_messages[message.from_user.id].append(msg)


async def fsm_weekly_description(message: types.Message, state: FSMContext):
    desc = message.text.strip()
    data = await state.get_data()
    dt = data["event_datetime"]

    await state.update_data(description=desc)
    await state.update_data(selected_weekdays=set())  # –∏—Å–ø–æ–ª—å–∑—É–µ–º set –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞

    kb = create_weekdays_keyboard(set())  # —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π

    await message.answer(
        "–í—ã–±–µ—Ä–∏ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –∏–≤–µ–Ω—Ç.\n"
        "–ù–∞–∂–∏–º–∞–π –Ω–∞ –¥–Ω–∏, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å/–æ—Ç–º–µ–Ω–∏—Ç—å.\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ì–æ—Ç–æ–≤–æ'.",
        reply_markup=kb
    )
    await state.set_state(AddEventWeeklyStates.waiting_for_weekdays_selection)
    dp.message.register(
    fsm_weekly_description,
    filters=StateFilter(AddEventWeeklyStates.waiting_for_description_w)
)


@dp.message(EditEventStates.waiting_for_edit_id)
async def fsm_edit_id(message: types.Message, state: FSMContext):
    try:
        event_id = int(message.text.strip())
        await state.update_data(event_id=event_id)
        try:
            await message.delete()
        except Exception:
            pass
        await cleanup_fsm_messages(message.from_user.id)
        msg = await message.answer("üìÖ –í–≤–µ–¥–∏ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú):")
        fsm_messages[message.from_user.id].append(msg)
        await state.set_state(EditEventStates.waiting_for_new_dt)
    except ValueError:
        try:
            await message.delete()
        except Exception:
            pass
        await cleanup_fsm_messages(message.from_user.id)
        msg = await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        fsm_messages[message.from_user.id].append(msg)


@dp.message(EditEventStates.waiting_for_new_dt)
async def fsm_edit_dt(message: types.Message, state: FSMContext):
    try:
        dt = datetime.strptime(message.text.strip(), "%Y-%m-%d %H:%M")
        await state.update_data(new_dt=dt)
        try:
            await message.delete()
        except Exception:
            pass
        await cleanup_fsm_messages(message.from_user.id)
        msg = await message.answer("üìù –¢–µ–ø–µ—Ä—å –æ–ø–∏—Å–∞–Ω–∏–µ:")
        fsm_messages[message.from_user.id].append(msg)
        await state.set_state(EditEventStates.waiting_for_new_desc)
    except ValueError:
        try:
            await message.delete()
        except Exception:
            pass
        await cleanup_fsm_messages(message.from_user.id)
        msg = await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        fsm_messages[message.from_user.id].append(msg)


@dp.message(EditEventStates.waiting_for_new_desc)
async def fsm_edit_desc(message: types.Message, state: FSMContext):
    data = await state.get_data()
    ev_id, new_dt = data["event_id"], data["new_dt"]
    desc = message.text.strip()
    try:
        await message.delete()
    except Exception:
        pass
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(
            "UPDATE events SET event_datetime=?, description=?, sent=0 WHERE id=?",
            (new_dt.isoformat(), desc, ev_id))
        await db.commit()
    await cleanup_fsm_messages(message.from_user.id)
    if cursor.rowcount:
        msg = await message.answer("‚úÖ –ò–≤–µ–Ω—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.")
    else:
        msg = await message.answer("‚ùå –ò–≤–µ–Ω—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    fsm_messages[message.from_user.id].append(msg)
    await state.clear()

# --- –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–≤–µ–Ω—Ç–æ–≤ ---
async def event_sender_task():
    while True:
        now = datetime.now()
        current_day = now.strftime("%a")  # –Ω–∞–ø—Ä–∏–º–µ—Ä, "Mon"
        events = await get_pending_events()

        for event in events:
            event_id, dt_str, description, repeat_weekly, repeat_daily, repeat_on_weekdays, user_id = event
            dt = datetime.fromisoformat(dt_str)

            should_send = False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
            if repeat_on_weekdays:
                weekdays = repeat_on_weekdays.split(",")  # –Ω–∞–ø—Ä–∏–º–µ—Ä ["Mon", "Wed", "Fri"]
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
                if current_day in weekdays:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è —Å —Ç–µ–∫—É—â–∏–º –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 1 –º–∏–Ω—É—Ç—ã
                    delta = abs((now - dt).total_seconds())
                    if delta < 60:
                        should_send = True

            # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            elif now >= dt:
                should_send = True

            if not should_send:
                continue

            try:
                await bot.send_message(
                    CHANNEL_ID,
                    f"üì¢ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –∏–≤–µ–Ω—Ç–µ:</b>\n‚è∞ {dt.strftime('%Y-%m-%d %H:%M')}\nüìå {description}"
                )

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
                if repeat_on_weekdays:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é, —á—Ç–æ–±—ã –Ω–µ —Å–ª–∞—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
                    new_dt = dt + timedelta(weeks=1)
                    await update_event_datetime(event_id, new_dt)

                elif repeat_daily:
                    new_dt = dt + timedelta(days=1)
                    await update_event_datetime(event_id, new_dt)

                elif repeat_weekly:
                    new_dt = dt + timedelta(weeks=1)
                    await update_event_datetime(event_id, new_dt)

                else:
                    await mark_event_sent(event_id)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–≤–µ–Ω—Ç–∞ {event_id}: {e}")

        await asyncio.sleep(60)


# --- –ó–∞–ø—É—Å–∫ ---
@dp.startup()
async def on_startup(bot: Bot):
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    asyncio.create_task(event_sender_task())

async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

from apscheduler.schedulers.asyncio import AsyncIOScheduler
import asyncio
from datetime import datetime
from database import get_all_events
import logging

async def schedule_event_notifications(bot, group_id):
    while True:
        now = datetime.now()
        today = now.strftime("%Y-%m-%d")
        weekday = now.strftime("%a").lower()
        print(weekday)
        current_time = now.strftime("%H:%M")

        try:
            events = get_all_events()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–≤–µ–Ω—Ç–æ–≤ –∏–∑ –ë–î: {e}")
            await asyncio.sleep(5)
            continue

        for event in events:
            event_id, type_, days, date, time_, desc = event

            try:
                if type_ == "weekly":
                    if days and weekday in days.split(",") and time_ == current_time:
                        await bot.send_message(group_id, f"üîÅ <b>–ò–≤–µ–Ω—Ç:</b> {desc}\nüïí {time_}")

                elif type_ == "once":
                    if date == today and time_ == current_time:
                        await bot.send_message(group_id, f"üìå <b>–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∏–≤–µ–Ω—Ç:</b> {desc}\nüïí {time_}")
                        # –¢—É—Ç –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å/–æ—Ç–º–µ—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –≤ –ë–î

                elif type_ == "weekly_once":
                    if weekday in (days or "") and time_ == current_time:
                        await bot.send_message(group_id, f"üîÇ <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Ä–∞–∑–æ–≤—ã–π –∏–≤–µ–Ω—Ç:</b> {desc}\nüïí {time_}")
                        # –¢—É—Ç –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –Ω–∞ +7 –¥–Ω–µ–π, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏–ª
                elif type_ == "weekly_multiple":
                    if weekday in (days or "") and time_ == current_time:
                        await bot.send_message(group_id, f"üîÇ <b>–ë—É–¥–Ω–∏—á–Ω—ã–π –∏–≤–µ–Ω—Ç:</b> {desc}\nüïí {time_}")
                        # –¢—É—Ç –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –Ω–∞ +7 –¥–Ω–µ–π, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏–ª

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–≤–µ–Ω—Ç–∞ {event_id}: {e}")
        await asyncio.sleep(60)
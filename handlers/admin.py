import os

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from states import EventCreation
from database import add_event, get_all_events, delete_event
from asyncio import sleep
from dotenv import load_dotenv

router = Router()

load_dotenv()

admin_ids_str = os.getenv("ADMIN_USER_IDS", "")
ADMIN_IDS = set(map(int, admin_ids_str.split(','))) if admin_ids_str else set()
WEEKDAY_SHORT_RU = {
    "mon": "–ü–Ω",
    "tue": "–í—Ç",
    "wed": "–°—Ä",
    "thu": "–ß—Ç",
    "fri": "–ü—Ç",
    "sat": "–°–±",
    "sun": "–í—Å"
}
EVENT_TYPE_RU = {
    "weekly_once": "1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é",
    "weekly_multiple": "–Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é",
    "once": "–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π"
}
def get_event_type_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∏–≤–µ–Ω—Ç—ã (–Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π)", callback_data="weekly_multiple")],
        [InlineKeyboardButton(text="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∏–≤–µ–Ω—Ç (1 –¥–µ–Ω—å –≤ –Ω–µ–¥–µ–ª—é)", callback_data="weekly_once")],
        [InlineKeyboardButton(text="–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∏–≤–µ–Ω—Ç", callback_data="once")]
    ])

def get_days_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–Ω, –°—Ä, –ü—Ç", callback_data="mon,wed,fri")],
        [InlineKeyboardButton(text="–í—Ç, –ß—Ç", callback_data="tue,thu")],
        [InlineKeyboardButton(text="–í—Å–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏", callback_data="mon,tue,wed,thu,fri,sat,sun")]
    ])

def get_weekday_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", callback_data="mon")],
        [InlineKeyboardButton(text="–í—Ç–æ—Ä–Ω–∏–∫", callback_data="tue")],
        [InlineKeyboardButton(text="–°—Ä–µ–¥–∞", callback_data="wed")],
        [InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–≥", callback_data="thu")],
        [InlineKeyboardButton(text="–ü—è—Ç–Ω–∏—Ü–∞", callback_data="fri")],
        [InlineKeyboardButton(text="–°—É–±–±–æ—Ç–∞", callback_data="sat")],
        [InlineKeyboardButton(text="–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", callback_data="sun")],
    ])

def admin_only(handler):
    async def wrapper(message: Message, state: FSMContext, *args, **kwargs):
        if message.from_user.id not in ADMIN_IDS:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        return await handler(message, state, *args, **kwargs)
    return wrapper

def convert_days_to_ru(days_str: str) -> str:
    if not days_str:
        return ""
    days_list = days_str.split(",")
    ru_days = [WEEKDAY_SHORT_RU.get(day, day) for day in days_list]
    return ", ".join(ru_days)


@router.message(Command("admin"))
async def admin_panel(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
        return

    await state.clear()
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –∏–≤–µ–Ω—Ç", callback_data="create_event")],
        [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –∏–≤–µ–Ω—Ç–æ–≤", callback_data="list_events")]
    ])
    await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=kb)


@router.callback_query(F.data == "create_event")
async def create_event(callback: CallbackQuery, state: FSMContext):
    await state.set_state(EventCreation.choosing_type)
    await callback.answer()
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–≤–µ–Ω—Ç–∞:", reply_markup=get_event_type_kb())

# –®–∞–≥ 1: –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∏–≤–µ–Ω—Ç–∞
@router.callback_query(F.data.in_({"weekly_multiple", "weekly_once", "once"}))
async def choose_type(callback: CallbackQuery, state: FSMContext):
    await state.update_data(type=callback.data)
    if callback.data == "weekly_multiple":
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –¥–ª—è –∏–≤–µ–Ω—Ç–∞:", reply_markup=get_days_kb())
        await state.set_state(EventCreation.choosing_days)
    elif callback.data == "weekly_once":
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –∏–≤–µ–Ω—Ç–∞:", reply_markup=get_weekday_kb())
        await state.set_state(EventCreation.choosing_day_once)
    elif callback.data == "once":
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏–≤–µ–Ω—Ç–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):")
        await state.set_state(EventCreation.entering_date)

# –®–∞–≥ 2 –¥–ª—è weekly_multiple ‚Äî –≤—ã–±–∏—Ä–∞–µ–º –¥–Ω–∏ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
@router.callback_query(EventCreation.choosing_day_once)
async def choose_day_once(callback: CallbackQuery, state: FSMContext):
    await state.update_data(day=callback.data)
    try:
        await callback.message.delete()
    except Exception:
        pass
    time_msg = await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–≤–µ–Ω—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç HH:MM):")
    await state.update_data(time_prompt_id=time_msg.message_id)

    await state.set_state(EventCreation.entering_time)

@router.message(EventCreation.entering_time)
async def enter_time(message: Message, state: FSMContext):
    data = await state.get_data()
    await state.update_data(time=message.text)

    try:
        await message.delete()
    except Exception:
        pass

    if "time_prompt_id" in data:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=data["time_prompt_id"])
        except Exception:
            pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ..." –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID
    next_msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞:")
    await state.update_data(description_prompt_id=next_msg.message_id)

    await state.set_state(EventCreation.entering_description)

@router.message(EventCreation.entering_description)
async def enter_description(message: Message, state: FSMContext):
    data = await state.get_data()
    await state.update_data(description=message.text)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except Exception:
        pass

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ..."
    if "description_prompt_id" in data:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=data["description_prompt_id"])
        except Exception:
            pass

    # –ó–¥–µ—Å—å –¥–∞–ª—å—à–µ ‚Äî –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≤–µ–Ω—Ç–∞, –≤–æ–∑–≤—Ä–∞—Ç –∫ –∞–¥–º–∏–Ω–∫–µ –∏ —Ç.–ø.
    msg = await message.answer("‚úÖ –ò–≤–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    await sleep(5)
    try:
        msg.delete()
    except Exception:
        pass
    # ...–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –∏ —Ç.–¥.
    await state.clear()

@router.callback_query(F.data == "list_events")
async def list_events(callback: CallbackQuery):
    events = get_all_events()
    if not events:
        await callback.message.edit_text("‚ö†Ô∏è –ò–≤–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="hide_list")]]
        ))
        return

    text = "üìã <b>–ò–≤–µ–Ω—Ç—ã:</b>\n\n"
    for e in events:
        event_id = e[0]
        event_type = e[1]
        days = e[2]  # –Ω–∞–ø—Ä–∏–º–µ—Ä, "mon,wed,fri"
        date = e[3]
        time = e[4]
        description = e[5]
        ru_type = EVENT_TYPE_RU.get(event_type, event_type)
        days_display = convert_days_to_ru(days) if days else date

        text += (
            f"üÜî <b>{event_id}</b> | <i>{ru_type}</i>\n"
            f"üìÖ <b>{days_display}</b> ‚è∞ <b>{time}</b>\n"
            f"üìù <i>{description}</i>\n\n"
        )
    text += "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å: /delete ID"
    await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–°–∫—Ä—ã—Ç—å", callback_data="hide_list")]]
    ))


@router.callback_query(F.data == "hide_list")
async def hide_list(callback: CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –∏–≤–µ–Ω—Ç", callback_data="create_event")],
        [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –∏–≤–µ–Ω—Ç–æ–≤", callback_data="list_events")]
    ])
    await callback.message.edit_text("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=kb)

@router.message(Command("delete"))
async def delete_by_id(message: Message):
    try:
        event_id = int(message.text.split()[1])
        delete_event(event_id)
        sent_msg = await message.answer("üóëÔ∏è –ò–≤–µ–Ω—Ç —É–¥–∞–ª—ë–Ω.")
        await sleep(5)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å –≤–≤–æ–¥–æ–º –æ–ø–∏—Å–∞–Ω–∏—è)
        await message.delete()
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        await sent_msg.delete()
    except:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ ID: /delete 1")

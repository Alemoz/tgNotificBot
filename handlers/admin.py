import os

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from states import EventCreation
from database import add_event, get_all_events, delete_event
from asyncio import sleep
from dotenv import load_dotenv
from datetime import datetime, timezone, timedelta

router = Router()

load_dotenv()

admin_ids_str = os.getenv("ADMIN_USER_IDS", "")
ADMIN_IDS = set(map(int, admin_ids_str.split(','))) if admin_ids_str else set()
WEEKDAY_SHORT_RU = {
    "mon": "–ü–Ω",
    "tue": "–í—Ç",
    "wed": "–°—Ä",
    "thu": "–ß—Ç",
    "fri": "–ü—Ç",
    "sat": "–°–±",
    "sun": "–í—Å"
}
EVENT_TYPE_RU = {
    "weekly_once": "1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é",
    "weekly_multiple": "–Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é",
    "once": "–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π",
    "weekday": "–±—É–¥–Ω–∏—á–Ω—ã–π"
}
DAY_ORDER = {'mon': 1, 'tue': 2, 'wed': 3, 'thu': 4, 'fri': 5, 'sat': 6, 'sun': 7}
DAY_GROUPS = {
    "–ü–Ω, –°—Ä, –ü—Ç": {"mon", "wed", "fri"},
    "–í—Ç, –ß—Ç": {"tue", "thu"},
    "–ë—É–¥–Ω–∏": {"mon", "tue", "wed", "thu", "fri"},
    "–í—Å–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏": {"mon", "tue", "wed", "thu", "fri", "sat", "sun"},
}

def classify_days(days_str):
    if not days_str:
        return None

    days = set(days_str.split(","))
    for name, group_days in DAY_GROUPS.items():
        if days == group_days:
            return name
    return "–ü—Ä–æ—á–µ–µ"

def time_key(event):
    try:
        return datetime.strptime(event[4], "%H:%M")
    except:
        return datetime.strptime("00:00", "%H:%M")

def get_event_type_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∏–≤–µ–Ω—Ç—ã (–Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π)", callback_data="weekly_multiple")],
        [InlineKeyboardButton(text="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∏–≤–µ–Ω—Ç (1 —Ä–∑–∞ –≤ –Ω–µ–¥–µ–ª—é)", callback_data="weekly_once")],
        # [InlineKeyboardButton(text="–ë—É–¥–Ω–∏—á–Ω—ã–π –∏–≤–µ–Ω—Ç", callback_data="weekdays")],
        [InlineKeyboardButton(text="–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∏–≤–µ–Ω—Ç", callback_data="once")]
    ])


def get_days_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–Ω, –°—Ä, –ü—Ç", callback_data="mon,wed,fri")],
        [InlineKeyboardButton(text="–í—Ç, –ß—Ç", callback_data="tue,thu")],
        [InlineKeyboardButton(text="–ë—É–¥–Ω–∏", callback_data="mon,tue,wed,thu,fri")],
        [InlineKeyboardButton(text="–í—Å–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏", callback_data="mon,tue,wed,thu,fri,sat,sun")]
    ])


def get_weekday_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", callback_data="mon")],
        [InlineKeyboardButton(text="–í—Ç–æ—Ä–Ω–∏–∫", callback_data="tue")],
        [InlineKeyboardButton(text="–°—Ä–µ–¥–∞", callback_data="wed")],
        [InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–≥", callback_data="thu")],
        [InlineKeyboardButton(text="–ü—è—Ç–Ω–∏—Ü–∞", callback_data="fri")],
        [InlineKeyboardButton(text="–°—É–±–±–æ—Ç–∞", callback_data="sat")],
        [InlineKeyboardButton(text="–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", callback_data="sun")],
    ])


def admin_only(handler):
    async def wrapper(message: Message, state: FSMContext, *args, **kwargs):
        if message.from_user.id not in ADMIN_IDS:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        return await handler(message, state, *args, **kwargs)

    return wrapper


def convert_days_to_ru(days_str: str) -> str:
    if not days_str:
        return ""
    days_list = days_str.split(",")
    ru_days = [WEEKDAY_SHORT_RU.get(day, day) for day in days_list]
    return ", ".join(ru_days)


@router.message(Command("admin"))
async def admin_panel(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
        return

    await state.clear()

    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞ (UTC)
    utc_now = datetime.now(timezone.utc)

    # –í—Ä–µ–º—è –ø–æ GMT+3
    gmt3_now = utc_now.astimezone(timezone(timedelta(hours=3)))

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏
    server_time_str = utc_now.strftime("%Y-%m-%d %H:%M:%S UTC")
    local_time_str = gmt3_now.strftime("%Y-%m-%d %H:%M:%S GMT+3")

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –∏–≤–µ–Ω—Ç", callback_data="create_event")],
        [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –∏–≤–µ–Ω—Ç–æ–≤", callback_data="list_events")]
    ])

    await message.answer(
        f"üìã <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        f"üïí <b>–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞ (UTC):</b> {server_time_str}\n"
        f"üïí <b>–ú–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è (GMT+3):</b> {local_time_str}",
        reply_markup=kb
    )


@router.message(Command("getdb"))
async def send_db_file(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    try:
        file = FSInputFile("events.db")
        await message.answer_document(file, caption="üì¶ –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")


@router.callback_query(F.data == "create_event")
async def create_event(callback: CallbackQuery, state: FSMContext):
    await state.set_state(EventCreation.choosing_type)
    await callback.answer()
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–≤–µ–Ω—Ç–∞:", reply_markup=get_event_type_kb())


# –®–∞–≥ 1: –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∏–≤–µ–Ω—Ç–∞
@router.callback_query(F.data.in_({"weekly_multiple", "weekly_once", "once", "weekdays"}))
async def choose_type(callback: CallbackQuery, state: FSMContext):
    await state.update_data(type=callback.data)
    if callback.data == "weekly_multiple":
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –¥–ª—è –∏–≤–µ–Ω—Ç–∞:", reply_markup=get_days_kb())
        await state.set_state(EventCreation.choosing_days)
    elif callback.data == "weekly_once":
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –∏–≤–µ–Ω—Ç–∞:", reply_markup=get_weekday_kb())
        await state.set_state(EventCreation.choosing_day_once)
    elif callback.data == "once":
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏–≤–µ–Ω—Ç–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):")
        await state.set_state(EventCreation.entering_date)
    elif callback.data == "weekdays":
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±—É–¥–Ω–∏–µ –¥–Ω–∏
        await state.update_data(days="mon,tue,wed,thu,fri")
        time_msg = await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–≤–µ–Ω—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç HH:MM):")
        await state.update_data(time_prompt_id=time_msg.message_id)
        await state.set_state(EventCreation.entering_time)


@router.callback_query(EventCreation.choosing_day_once)
async def choose_day_once(callback: CallbackQuery, state: FSMContext):
    await state.update_data(day=callback.data)
    try:
        await callback.message.delete()
    except Exception:
        pass
    time_msg = await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–≤–µ–Ω—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç HH:MM):")
    await state.update_data(time_prompt_id=time_msg.message_id)

    await state.set_state(EventCreation.entering_time)


@router.callback_query(EventCreation.choosing_days)
async def choose_multiple_days(callback: CallbackQuery, state: FSMContext):
    await state.update_data(days=callback.data)

    try:
        await callback.message.delete()
    except Exception:
        pass

    time_msg = await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–≤–µ–Ω—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç HH:MM):")
    await state.update_data(time_prompt_id=time_msg.message_id)
    await state.set_state(EventCreation.entering_time)


@router.message(EventCreation.entering_time)
async def enter_time(message: Message, state: FSMContext):
    data = await state.get_data()
    await state.update_data(time=message.text)

    try:
        await message.delete()
    except Exception:
        pass

    if "time_prompt_id" in data:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=data["time_prompt_id"])
        except Exception:
            pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ..." –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID
    next_msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞:")
    await state.update_data(description_prompt_id=next_msg.message_id)

    await state.set_state(EventCreation.entering_description)


@router.message(EventCreation.entering_description)
async def enter_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    data = await state.get_data()

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    try:
        await message.delete()
    except Exception:
        pass

    if "description_prompt_id" in data:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=data["description_prompt_id"])
        except Exception:
            pass
    if data.get("type") == "weekly_once" and not data.get("days"):
        data["days"] = data.get("day")  # day='mon', –Ω–∞–ø—Ä–∏–º–µ—Ä
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –ë–î
    add_event(
        event_type=data.get("type"),
        days=data.get("days"),
        date=data.get("date"),
        time=data.get("time"),
        description=data.get("description")
    )

    msg = await message.answer("‚úÖ –ò–≤–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    await sleep(5)
    try:
        await msg.delete()
    except Exception:
        pass
    await state.clear()


@router.callback_query(F.data == "list_events")
async def list_events(callback: CallbackQuery):
    events = get_all_events()
    if not events:
        await callback.message.edit_text("‚ö†Ô∏è –ò–≤–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="hide_list")]]
        ))
        return

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞
    grouped = {
        "–ü–Ω, –°—Ä, –ü—Ç": [],
        "–í—Ç, –ß—Ç": [],
        "–ë—É–¥–Ω–∏": [],
        "–í—Å–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏": [],
        "–ü—Ä–æ—á–µ–µ": []
    }

    for e in events:
        _, type_, days, date, time, description = e
        group_name = classify_days(days)
        grouped[group_name].append(e)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = "üìã <b>–ò–≤–µ–Ω—Ç—ã:</b>\n\n"
    for group_name in ["–ü–Ω, –°—Ä, –ü—Ç", "–í—Ç, –ß—Ç", "–ë—É–¥–Ω–∏", "–í—Å–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏", "–ü—Ä–æ—á–µ–µ"]:
        events_in_group = sorted(grouped[group_name], key=time_key)
        if not events_in_group:
            continue
        text += f"üîπ <b>{group_name}</b>\n"
        for e in events_in_group:
            event_id = e[0]
            event_type = e[1]
            days = e[2]
            date = e[3]
            time = e[4]
            description = e[5]

            ru_type = EVENT_TYPE_RU.get(event_type, event_type)
            days_display = convert_days_to_ru(days) if days else date

            text += (
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                f"üÜî <b>{event_id}</b> | <i>{ru_type}</i>\n"
                f"üìÖ <b>{days_display}</b> ‚è∞ <b>{time}</b>\n"
                f"üìù <i>{description}</i>\n"
            )
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"

    text += "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å: /delete ID"
    await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–°–∫—Ä—ã—Ç—å", callback_data="hide_list")]]
    ))


@router.callback_query(F.data == "hide_list")
async def hide_list(callback: CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –∏–≤–µ–Ω—Ç", callback_data="create_event")],
        [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –∏–≤–µ–Ω—Ç–æ–≤", callback_data="list_events")]
    ])
    await callback.message.edit_text("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=kb)


@router.message(Command("delete"))
async def delete_by_id(message: Message):
    try:
        event_id = int(message.text.split()[1])
        delete_event(event_id)
        sent_msg = await message.answer("üóëÔ∏è –ò–≤–µ–Ω—Ç —É–¥–∞–ª—ë–Ω.")
        await sleep(5)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å –≤–≤–æ–¥–æ–º –æ–ø–∏—Å–∞–Ω–∏—è)
        await message.delete()
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        await sent_msg.delete()
    except:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ ID: /delete 1")
